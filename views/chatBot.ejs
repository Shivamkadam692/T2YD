<link rel="stylesheet" href="/style-modern.css">
<link rel="stylesheet" href="/card-styles.css">

<div class="container">
  <div class="dashboard-header">
    <h1><i class="fas fa-robot"></i> T2YD Assistant</h1>
    <p>Ask me anything about using the T2YD platform</p>
  </div>

  <div class="card-container">
    <div class="card">
      <div class="card-header">
        <h3>Chat with Assistant</h3>
        <button id="clearChat" class="btn btn-outline" style="float: right; padding: 0.3rem 0.6rem; font-size: 0.8rem;">
          <i class="fas fa-trash"></i> Clear Chat
        </button>
      </div>
      <div class="card-body">
        <div id="chatContainer">
          <div id="chatHistory">
            <!-- Chat messages will be loaded here -->
          </div>
          <div id="chatInputContainer">
            <div class="input-group">
              <input type="text" id="chatInput" placeholder="Type your message here..." autocomplete="off">
              <button id="sendButton" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i> Send
              </button>
            </div>
            <div class="chat-hints">
              <small>Try asking: "How do I add a lorry?" or "How to track deliveries?"</small>
            </div>
            <div class="quick-help">
              <h4>Quick Help Topics:</h4>
              <div class="help-topics">
                <button class="help-topic-btn" data-topic="account">Account</button>
                <button class="help-topic-btn" data-topic="lorry">Add Lorry</button>
                <button class="help-topic-btn" data-topic="delivery">Add Delivery</button>
                <button class="help-topic-btn" data-topic="payment">Payments</button>
                <button class="help-topic-btn" data-topic="track">Tracking</button>
                <% if (!user) { %>
                <button class="help-topic-btn" data-topic="login">Login</button>
                <button class="help-topic-btn" data-topic="register">Register</button>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // DOM elements
  const chatHistory = document.getElementById('chatHistory');
  const chatInput = document.getElementById('chatInput');
  const sendButton = document.getElementById('sendButton');
  const clearChatButton = document.getElementById('clearChat');

  // Load chat history on page load
  document.addEventListener('DOMContentLoaded', function() {
    loadChatHistory();
  });

  // Load chat history from server
  async function loadChatHistory() {
    try {
      const response = await fetch('/chatbot/history');
      const data = await response.json();
      
      if (data.success && data.history) {
        renderChatHistory(data.history);
      } else {
        // Show welcome message if no history
        addBotMessage("Hello! I'm your T2YD Assistant. How can I help you today?");
      }
    } catch (error) {
      console.error('Error loading chat history:', error);
      addBotMessage("Hello! I'm your T2YD Assistant. How can I help you today?");
    }
  }

  // Render chat history
  function renderChatHistory(messages) {
    chatHistory.innerHTML = '';
    
    if (messages.length === 0) {
      addBotMessage("Hello! I'm your T2YD Assistant. How can I help you today?");
      return;
    }
    
    messages.forEach(message => {
      if (message.isUser) {
        addUserMessage(message.message);
      } else {
        addBotMessage(message.message);
      }
    });
    
    // Scroll to bottom
    chatHistory.scrollTop = chatHistory.scrollHeight;
  }

  // Add user message to chat
  function addUserMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message user-message';
    messageElement.innerHTML = `
      <div class="message-content">
        ${message}
      </div>
      <div class="message-info">
        <span class="message-sender">You</span>
        <span class="message-time">${formatTime(new Date())}</span>
      </div>
    `;
    chatHistory.appendChild(messageElement);
    chatHistory.scrollTop = chatHistory.scrollHeight;
  }

  // Add bot message to chat
  function addBotMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message bot-message';
    messageElement.innerHTML = `
      <div class="message-content">
        ${formatMessage(message)}
      </div>
      <div class="message-info">
        <span class="message-sender">T2YD Assistant</span>
        <span class="message-time">${formatTime(new Date())}</span>
      </div>
    `;
    chatHistory.appendChild(messageElement);
    chatHistory.scrollTop = chatHistory.scrollHeight;
  }

  // Format message (convert newlines to <br>)
  function formatMessage(message) {
    return message.replace(/\n/g, '<br>');
  }

  // Format time
  function formatTime(date) {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  // Send message to bot
  async function sendMessage() {
    const message = chatInput.value.trim();
    
    if (!message) return;
    
    // Add user message to UI
    addUserMessage(message);
    
    // Clear input
    chatInput.value = '';
    
    try {
      const response = await fetch('/chatbot/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
      });
      
      const data = await response.json();
      
      if (data.success) {
        addBotMessage(data.response);
      } else {
        addBotMessage("Sorry, I encountered an error. Please try again.");
      }
    } catch (error) {
      console.error('Error sending message:', error);
      addBotMessage("Sorry, I encountered an error. Please try again.");
    }
  }

  // Clear chat history
  async function clearChat() {
    if (!confirm('Are you sure you want to clear the chat history?')) {
      return;
    }
    
    try {
      const response = await fetch('/chatbot/clear', {
        method: 'DELETE'
      });
      
      const data = await response.json();
      
      if (data.success) {
        chatHistory.innerHTML = '';
        addBotMessage("Chat history cleared. How can I help you today?");
      } else {
        alert('Failed to clear chat history');
      }
    } catch (error) {
      console.error('Error clearing chat:', error);
      alert('Failed to clear chat history');
    }
  }

  // Event listeners
  sendButton.addEventListener('click', sendMessage);
  
  chatInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
  
  clearChatButton.addEventListener('click', clearChat);
  
  // Quick help buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('help-topic-btn')) {
      const topic = e.target.getAttribute('data-topic');
      let message = '';
      
      switch(topic) {
        case 'account':
          message = 'How do I manage my account?';
          break;
        case 'lorry':
          message = 'How do I add a lorry?';
          break;
        case 'delivery':
          message = 'How do I add a delivery request?';
          break;
        case 'payment':
          message = 'How do payments work?';
          break;
        case 'track':
          message = 'How do I track deliveries?';
          break;
        case 'call':
          message = 'How do I make calls?';
          break;
        case 'login':
          message = 'How do I log in?';
          break;
        case 'register':
          message = 'How do I create an account?';
          break;
        default:
          message = 'Help me with ' + topic;
      }
      
      // Set the message in the input and send it
      chatInput.value = message;
      sendMessage();
    }
  });
</script>

<style>
  #chatContainer {
    display: flex;
    flex-direction: column;
    height: 500px;
  }
  
  #chatHistory {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    border: 1px solid #eee;
    border-radius: 8px;
    margin-bottom: 1rem;
    background-color: #f9f9f9;
  }
  
  .chat-message {
    margin-bottom: 1rem;
    padding: 0.75rem;
    border-radius: 8px;
    max-width: 80%;
  }
  
  .user-message {
    background-color: #3b82f6;
    color: white;
    margin-left: auto;
    text-align: right;
  }
  
  .bot-message {
    background-color: #f1f5f9;
    color: #1e293b;
    margin-right: auto;
  }
  
  .message-content {
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }
  
  .message-info {
    font-size: 0.75rem;
    opacity: 0.8;
  }
  
  .user-message .message-info {
    text-align: right;
  }
  
  .message-sender {
    font-weight: 600;
  }
  
  #chatInputContainer {
    display: flex;
    flex-direction: column;
  }
  
  .input-group {
    display: flex;
    gap: 0.5rem;
  }
  
  #chatInput {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #cbd5e1;
    border-radius: 8px;
    font-size: 1rem;
  }
  
  #chatInput:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }
  
  .chat-hints {
    margin-top: 0.5rem;
    text-align: center;
    color: #64748b;
    font-size: 0.8rem;
  }
  
  .quick-help {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e2e8f0;
  }
  
  .quick-help h4 {
    margin-bottom: 0.5rem;
    color: #334155;
    text-align: center;
  }
  
  .help-topics {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }
  
  .help-topic-btn {
    background: #e2e8f0;
    border: none;
    border-radius: 20px;
    padding: 0.3rem 0.8rem;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .help-topic-btn:hover {
    background: #cbd5e1;
    transform: translateY(-2px);
  }
  
  @media (max-width: 768px) {
    #chatContainer {
      height: 400px;
    }
    
    .chat-message {
      max-width: 90%;
    }
    
    .input-group {
      flex-direction: column;
    }
  }
</style>