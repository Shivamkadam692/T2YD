<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>T2YD | Goods Transport Platform</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/style-modern.css">
</head>
<body>
  <header>
    <nav>
      <a href="/" class="logo">T2<span>YD</span></a>
      <ul class="nav-links" id="mobile-nav" tabindex="-1" aria-hidden="true" role="navigation" aria-label="Primary">
        <li class="mobile-menu-header" style="display:none">
          <button class="close-mobile btn btn-outline" aria-label="Close menu" style="display:none">Close âœ•</button>
        </li>
        <li><a href="/">Home</a></li>
        <% if (user) { %>
          <% if (user.role === 'transporter') { %>
            <li><a href="/dashboard/transporter">Dashboard</a></li>
            <li><a href="/lorries/add">Add Lorry</a></li>
          <% } else if (user.role === 'shipper') { %>
            <li><a href="/dashboard/shipper">Dashboard</a></li>
            <li><a href="/deliveries/add">Add Delivery</a></li>
          <% } %>
        <% } %>
        <% if (!user) { %>
          <li><a href="/auth/login" class="btn btn-outline">Login</a></li>
          <li><a href="/auth/signup" class="btn">Signup</a></li>
        <% } else { %>
          <li class="user-greeting" style="color:#071124;font-weight:600">Welcome, <span style="color:#071124"><%= user.name %></span> (<%= user.role%>) </li>
          <li>
            <div class="notification-container">
              <button class="notification-btn" id="notificationBtn" aria-label="Notifications">
                <i class="fas fa-bell" style="color:#071124"></i>
                <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
              </button>
              <div class="notification-dropdown" id="notificationDropdown">
                <div class="notification-header">
                  <h3>Notifications</h3>
                  <button class="mark-all-read" id="markAllRead">Mark all read</button>
                </div>
                <div class="notification-list" id="notificationList">
                  <div class="loading">Loading notifications...</div>
                </div>
                <div class="notification-footer">
                  <a href="/notifications/view" class="view-all">View all notifications</a>
                </div>
              </div>
            </div>
          </li>
          <li><a href="/auth/logout" class="btn btn-outline">Logout</a></li>
        <% } %>
      </ul>
      <button class="mobile-menu-toggle" id="mobile-menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" aria-controls="mobile-nav">
        <span></span>
        <span></span>
        <span></span>
      </button>
    </nav>
  </header>
  <div class="nav-backdrop" id="nav-backdrop" aria-hidden="true"></div>
  <div id="simple-mobile-menu" class="simple-mobile-menu" aria-hidden="true"></div>

  <main>
    <%- body %>
  </main>

  <footer>
    <div class="footer-content">
      <ul class="footer-links">
        <li><a href="/about">About Us</a></li>
        <li><a href="/terms">Terms of Service</a></li>
        <li><a href="/privacy">Privacy Policy</a></li>
        <li><a href="/contact">Contact</a></li>
      </ul>
      <div class="copyright">
        <p>&copy; 2025 T2YD. All rights reserved.</p>
      </div>
    </div>
  </footer>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Mobile menu toggle with backdrop and focus trap
    (function(){
      const toggle = document.getElementById('mobile-menu-toggle');
      const nav = document.getElementById('mobile-nav');
      const backdrop = document.getElementById('nav-backdrop');
      if (!(toggle && nav && backdrop)) return;

      let lastFocused = null;
      const getFocusable = () => nav.querySelectorAll('a, button, [tabindex]:not([tabindex="-1"])');
      const firstFocusable = () => getFocusable()[0];
      const lastFocusable = () => getFocusable()[getFocusable().length - 1];

      const closeMenu = () => {
        document.body.classList.remove('menu-open');
        nav.classList.remove('active');
        nav.setAttribute('aria-hidden', 'true');
        toggle.classList.remove('active');
        toggle.setAttribute('aria-expanded', 'false');
        backdrop.classList.remove('show');
        backdrop.setAttribute('aria-hidden', 'true');
        // hide close button inside mobile nav
        const closeBtn = nav.querySelector('.close-mobile'); if (closeBtn) { closeBtn.style.display = 'none'; }
        try { sessionStorage.removeItem('t2yd_nav_open'); } catch(_) {}
        if (lastFocused) { lastFocused.focus(); lastFocused = null; }
      };

      const openMenu = () => {
        lastFocused = document.activeElement;
        document.body.classList.add('menu-open');
        nav.classList.add('active');
        nav.setAttribute('aria-hidden', 'false');
        toggle.classList.add('active');
        toggle.setAttribute('aria-expanded', 'true');
        backdrop.classList.add('show');
        backdrop.setAttribute('aria-hidden', 'false');
  // show close button inside mobile nav
  const closeBtn = nav.querySelector('.close-mobile'); if (closeBtn) { closeBtn.style.display = 'inline-block'; }
        try { sessionStorage.setItem('t2yd_nav_open', '1'); } catch(_) {}
        const f = firstFocusable();
        if (f) f.focus();
      };

      toggle.addEventListener('click', function(e){
        e.stopPropagation();
        nav.classList.contains('active') ? closeMenu() : openMenu();
      });

      // Close button inside mobile nav
      const closeMobileBtn = nav.querySelector('.close-mobile');
      if (closeMobileBtn) {
        closeMobileBtn.style.display = 'none';
        closeMobileBtn.addEventListener('click', function(e){ e.preventDefault(); closeMenu(); });
      }

      backdrop.addEventListener('click', closeMenu);

      document.addEventListener('keydown', function(e){
        if (!nav.classList.contains('active')) return;
        if (e.key === 'Escape') { e.preventDefault(); closeMenu(); }
        if (e.key === 'Tab') {
          const first = firstFocusable();
          const last = lastFocusable();
          if (!first || !last) return;
          if (e.shiftKey && document.activeElement === first) {
            e.preventDefault();
            last.focus();
          } else if (!e.shiftKey && document.activeElement === last) {
            e.preventDefault();
            first.focus();
          }
        }
      });

      // Persist open state across page loads for small screens
      const smallQuery = window.matchMedia('(max-width: 768px)');
      try {
        if (sessionStorage.getItem('t2yd_nav_open') === '1' && smallQuery.matches) {
          openMenu();
        }
      } catch(_) {}

      // If viewport leaves mobile size, ensure menu is closed and state cleared
      const handleViewportChange = () => {
        if (!smallQuery.matches && nav.classList.contains('active')) {
          closeMenu();
        }
      };
      if (smallQuery.addEventListener) {
        smallQuery.addEventListener('change', handleViewportChange);
      } else if (smallQuery.addListener) {
        smallQuery.addListener(handleViewportChange);
      }
    })();
  </script>
  <% if (user) { %>
  <script>
    (function() {
      const currentUserId = '<%= user._id %>';
      const socket = io();
      const notificationBtn = document.getElementById('notificationBtn');
      const notificationDropdown = document.getElementById('notificationDropdown');
      const notificationBadge = document.getElementById('notificationBadge');
      const notificationList = document.getElementById('notificationList');
      const markAllReadBtn = document.getElementById('markAllRead');
      
      let notifications = [];
      let unreadCount = 0;

      // Join user's notification room
      socket.emit('joinUser', currentUserId);

      // Load notifications on page load
      loadNotifications();

      // Toggle notification dropdown
      notificationBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        notificationDropdown.classList.toggle('show');
        if (notificationDropdown.classList.contains('show')) {
          loadNotifications();
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!notificationBtn.contains(e.target) && !notificationDropdown.contains(e.target)) {
          notificationDropdown.classList.remove('show');
        }
      });

      // Mark all notifications as read
      markAllReadBtn.addEventListener('click', function() {
        markAllAsRead();
      });

      // Listen for new notifications
      socket.on('newNotification', function(notification) {
        console.log('Received new notification:', notification);
        addNotificationToList(notification);
        updateBadge();
        showToast(notification.title, notification.message);
      });

      // Load notifications from server
      async function loadNotifications() {
        try {
          const response = await fetch('/notifications?limit=10');
          const data = await response.json();
          
          notifications = data.notifications;
          unreadCount = data.unreadCount;
          
          renderNotifications();
          updateBadge();
        } catch (error) {
          console.error('Error loading notifications:', error);
          notificationList.innerHTML = '<div class="loading">Error loading notifications</div>';
        }
      }

      // Render notifications in the list
      function renderNotifications() {
        if (notifications.length === 0) {
          notificationList.innerHTML = `
            <div class="empty-notifications">
              <i class="fas fa-bell-slash"></i>
              <p>No notifications yet</p>
            </div>
          `;
          return;
        }

        notificationList.innerHTML = notifications.map(notification => `
          <div class="notification-item ${notification.isRead ? '' : 'unread'}" 
               data-id="${notification._id}" onclick="markAsRead('${notification._id}')">
            <div class="notification-title">
              ${notification.title}
              <span class="notification-priority ${notification.priority}">${notification.priority}</span>
            </div>
            <div class="notification-message">${notification.message}</div>
            <div class="notification-time">${formatTime(notification.createdAt)}</div>
          </div>
        `).join('');
      }

      // Add new notification to list
      function addNotificationToList(notification) {
        const notificationItem = document.createElement('div');
        notificationItem.className = 'notification-item unread';
        notificationItem.setAttribute('data-id', notification.id);
        notificationItem.onclick = () => markAsRead(notification.id);
        
        notificationItem.innerHTML = `
          <div class="notification-title">
            ${notification.title}
            <span class="notification-priority ${notification.priority}">${notification.priority}</span>
          </div>
          <div class="notification-message">${notification.message}</div>
          <div class="notification-time">Just now</div>
        `;

        notificationList.insertBefore(notificationItem, notificationList.firstChild);
        
        // Remove empty state if it exists
        const emptyState = notificationList.querySelector('.empty-notifications');
        if (emptyState) {
          emptyState.remove();
        }
      }

      // Mark notification as read
      async function markAsRead(notificationId) {
        try {
          await fetch(`/notifications/${notificationId}/read`, {
            method: 'PUT'
          });
          
          const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
          if (notificationItem) {
            notificationItem.classList.remove('unread');
          }
          
          unreadCount = Math.max(0, unreadCount - 1);
          updateBadge();
        } catch (error) {
          console.error('Error marking notification as read:', error);
        }
      }

      // Mark all notifications as read
      async function markAllAsRead() {
        try {
          await fetch('/notifications/mark-all-read', {
            method: 'PUT'
          });
          
          const unreadItems = notificationList.querySelectorAll('.notification-item.unread');
          unreadItems.forEach(item => item.classList.remove('unread'));
          
          unreadCount = 0;
          updateBadge();
        } catch (error) {
          console.error('Error marking all notifications as read:', error);
        }
      }

      // Update notification badge
      function updateBadge() {
        if (unreadCount > 0) {
          notificationBadge.style.display = 'flex';
          notificationBadge.textContent = unreadCount > 99 ? '99+' : unreadCount;
        } else {
          notificationBadge.style.display = 'none';
        }
      }

      // Format time
      function formatTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diff = now - date;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return 'Just now';
        if (minutes < 60) return `${minutes}m ago`;
        if (hours < 24) return `${hours}h ago`;
        if (days < 7) return `${days}d ago`;
        
        return date.toLocaleDateString();
      }

      // Show toast notification
      function showToast(title, message) {
        // Create toast element
        const toast = document.createElement('div');
        toast.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: white;
          border-left: 4px solid var(--secondary-color);
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          padding: 1rem;
          border-radius: 4px;
          z-index: 10000;
          max-width: 300px;
          animation: slideIn 0.3s ease;
        `;
        
        toast.innerHTML = `
          <div style="font-weight: 600; margin-bottom: 0.5rem;">${title}</div>
          <div style="font-size: 0.9rem; color: #666;">${message}</div>
        `;
        
        document.body.appendChild(toast);
        
        // Remove toast after 5 seconds
        setTimeout(() => {
          toast.style.animation = 'slideOut 0.3s ease';
          setTimeout(() => {
            if (toast.parentNode) {
              toast.parentNode.removeChild(toast);
            }
          }, 300);
        }, 5000);
      }

      // Add CSS animations
      const style = document.createElement('style');
      style.textContent = `
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
          from { transform: translateX(0); opacity: 1; }
          to { transform: translateX(100%); opacity: 0; }
        }
      `;
      document.head.appendChild(style);
    })();
  </script>
  <% } %>
  <script>
    // Simple mobile menu fallback: clones visible nav links into a plain full-screen menu
    (function(){
      const toggle = document.getElementById('mobile-menu-toggle');
      const simpleMenu = document.getElementById('simple-mobile-menu');
      const mobileNav = document.getElementById('mobile-nav');
      if (!toggle || !simpleMenu || !mobileNav) return;

      function buildSimpleMenu(){
        simpleMenu.innerHTML = '';
        const closeWrap = document.createElement('div'); closeWrap.className = 'mobile-close';
        const closeBtn = document.createElement('button'); closeBtn.innerText = 'Close âœ•'; closeBtn.addEventListener('click', hideSimpleMenu);
        closeWrap.appendChild(closeBtn);
        simpleMenu.appendChild(closeWrap);

        // clone only anchor-like items from server-rendered nav
        const anchors = mobileNav.querySelectorAll('a');
        anchors.forEach(a => {
          const copy = document.createElement('a');
          copy.href = a.href;
          copy.innerHTML = a.innerHTML;
          copy.className = a.className || '';
          copy.addEventListener('click', hideSimpleMenu);
          simpleMenu.appendChild(copy);
        });
      }

      function showSimpleMenu(){
        buildSimpleMenu();
        simpleMenu.classList.add('show');
        simpleMenu.setAttribute('aria-hidden', 'false');
        document.body.classList.add('menu-open');
      }
      function hideSimpleMenu(){
        simpleMenu.classList.remove('show');
        simpleMenu.setAttribute('aria-hidden', 'true');
        document.body.classList.remove('menu-open');
      }

      toggle.addEventListener('click', function(e){
        // if standard nav is active, prefer it; otherwise use simple fallback
        const usingFallback = !mobileNav.classList.contains('active');
        if (usingFallback) showSimpleMenu(); else hideSimpleMenu();
      });
    })();
  </script>
</body>
</html>