<div class="notifications-page">
     <div class="page-header">
     <h1>Notifications</h1>
     <div class="header-actions">
       <button class="btn btn-outline" id="markAllRead">Mark All as Read</button>
       <button class="btn btn-danger" id="deleteRead">Delete Read</button>
       <button class="btn" id="createTestNotification">Create Test Notification</button>
     </div>
   </div>

  <div class="notifications-container">
    <div class="notifications-filters">
      <button class="filter-btn active" data-filter="all">All</button>
      <button class="filter-btn" data-filter="unread">Unread</button>
      <button class="filter-btn" data-filter="delivery_request">Delivery Requests</button>
      <button class="filter-btn" data-filter="system">System</button>
    </div>

    <div class="notifications-list" id="notificationsList">
      <div class="loading">Loading notifications...</div>
    </div>

    <div class="load-more" id="loadMore" style="display: none;">
      <button class="btn btn-outline" onclick="loadMoreNotifications()">Load More</button>
    </div>
  </div>
</div>

<style>
  .notifications-page {
    max-width: 800px;
    margin: 0 auto;
  }

  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e1e5e9;
  }

  .page-header h1 {
    color: var(--primary-color);
    margin: 0;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
  }

  .notifications-filters {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    background: white;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .filter-btn:hover {
    background: #f8f9fa;
  }

  .filter-btn.active {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
  }

  .notifications-list {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .notification-item {
    padding: 1.5rem;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.3s ease;
    cursor: pointer;
  }

  .notification-item:hover {
    background-color: #f8f9fa;
  }

  .notification-item.unread {
    background-color: #e3f2fd;
  }

  .notification-item.unread:hover {
    background-color: #bbdefb;
  }

  .notification-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
  }

  .notification-title {
    font-weight: 600;
    color: var(--dark-color);
    font-size: 1rem;
    margin: 0;
  }

  .notification-time {
    color: #999;
    font-size: 0.8rem;
    white-space: nowrap;
    margin-left: 1rem;
  }

  .notification-message {
    color: #666;
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 0.5rem;
  }

  .notification-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .notification-priority {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.6rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .notification-actions {
    display: flex;
    gap: 0.5rem;
  }

  .notification-actions button {
    padding: 0.3rem 0.6rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8rem;
    transition: all 0.3s ease;
  }

  .mark-read-btn {
    background: var(--success-color);
    color: white;
  }

  .mark-read-btn:hover {
    background: #229954;
  }

     .delete-btn {
     background: #e74c3c;
     color: white;
   }

  .delete-btn:hover {
    background: #c0392b;
  }

  .empty-notifications {
    padding: 3rem;
    text-align: center;
    color: #666;
  }

  .empty-notifications i {
    font-size: 3rem;
    color: #ccc;
    margin-bottom: 1rem;
  }

  .load-more {
    text-align: center;
    margin-top: 2rem;
  }

  .loading {
    padding: 2rem;
    text-align: center;
    color: #666;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .header-actions {
      justify-content: center;
    }

    .notifications-filters {
      justify-content: center;
    }

    .notification-header {
      flex-direction: column;
      gap: 0.5rem;
    }

    .notification-time {
      margin-left: 0;
    }

    .notification-meta {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }
  }
</style>

<script>
  let currentPage = 1;
  let hasMore = true;
  let currentFilter = 'all';
  let notifications = [];

  // Load notifications on page load
  loadNotifications();

  // Filter buttons
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
      this.classList.add('active');
      currentFilter = this.dataset.filter;
      currentPage = 1;
      loadNotifications();
    });
  });

  // Mark all as read
  document.getElementById('markAllRead').addEventListener('click', markAllAsRead);

  // Delete read notifications
  document.getElementById('deleteRead').addEventListener('click', deleteReadNotifications);

  // Create test notification
  document.getElementById('createTestNotification').addEventListener('click', createTestNotification);

  async function loadNotifications() {
    try {
      const response = await fetch(`/notifications?page=${currentPage}&limit=20`);
      const data = await response.json();
      
      if (currentPage === 1) {
        notifications = data.notifications;
      } else {
        notifications = [...notifications, ...data.notifications];
      }
      
      hasMore = data.hasMore;
      renderNotifications();
      updateLoadMore();
    } catch (error) {
      console.error('Error loading notifications:', error);
      document.getElementById('notificationsList').innerHTML = 
        '<div class="loading">Error loading notifications</div>';
    }
  }

  function renderNotifications() {
    const list = document.getElementById('notificationsList');
    
    if (notifications.length === 0) {
      list.innerHTML = `
        <div class="empty-notifications">
          <i class="fas fa-bell-slash"></i>
          <p>No notifications found</p>
        </div>
      `;
      return;
    }

    const filteredNotifications = filterNotifications(notifications, currentFilter);
    
    list.innerHTML = filteredNotifications.map(notification => `
      <div class="notification-item ${notification.isRead ? '' : 'unread'}" data-id="${notification._id}">
        <div class="notification-header">
          <h3 class="notification-title">${notification.title}</h3>
          <span class="notification-time">${formatTime(notification.createdAt)}</span>
        </div>
        <div class="notification-message">${notification.message}</div>
        <div class="notification-meta">
          <span class="notification-priority ${notification.priority}">${notification.priority}</span>
          <div class="notification-actions">
            ${!notification.isRead ? 
              `<button class="mark-read-btn" onclick="markAsRead('${notification._id}')">Mark Read</button>` : 
              ''
            }
            <button class="delete-btn" onclick="deleteNotification('${notification._id}')">Delete</button>
          </div>
        </div>
      </div>
    `).join('');
  }

  function filterNotifications(notifications, filter) {
    switch (filter) {
      case 'unread':
        return notifications.filter(n => !n.isRead);
      case 'delivery_request':
        return notifications.filter(n => n.type === 'delivery_request');
      case 'system':
        return notifications.filter(n => n.type === 'system');
      default:
        return notifications;
    }
  }

  function updateLoadMore() {
    const loadMore = document.getElementById('loadMore');
    if (hasMore) {
      loadMore.style.display = 'block';
    } else {
      loadMore.style.display = 'none';
    }
  }

  function loadMoreNotifications() {
    currentPage++;
    loadNotifications();
  }

  async function markAsRead(notificationId) {
    try {
      await fetch(`/notifications/${notificationId}/read`, {
        method: 'PUT'
      });
      
      const notification = notifications.find(n => n._id === notificationId);
      if (notification) {
        notification.isRead = true;
      }
      
      renderNotifications();
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  }

  async function markAllAsRead() {
    try {
      await fetch('/notifications/mark-all-read', {
        method: 'PUT'
      });
      
      notifications.forEach(n => n.isRead = true);
      renderNotifications();
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
    }
  }

  async function deleteNotification(notificationId) {
    if (!confirm('Are you sure you want to delete this notification?')) {
      return;
    }
    
    try {
      await fetch(`/notifications/${notificationId}`, {
        method: 'DELETE'
      });
      
      notifications = notifications.filter(n => n._id !== notificationId);
      renderNotifications();
    } catch (error) {
      console.error('Error deleting notification:', error);
    }
  }

  async function deleteReadNotifications() {
    if (!confirm('Are you sure you want to delete all read notifications?')) {
      return;
    }
    
    try {
      await fetch('/notifications/delete-read', {
        method: 'DELETE'
      });
      
      notifications = notifications.filter(n => !n.isRead);
      renderNotifications();
    } catch (error) {
      console.error('Error deleting read notifications:', error);
    }
  }

     function formatTime(dateString) {
     const date = new Date(dateString);
     const now = new Date();
     const diff = now - date;
     
     const minutes = Math.floor(diff / 60000);
     const hours = Math.floor(diff / 3600000);
     const days = Math.floor(diff / 86400000);
     
     if (minutes < 1) return 'Just now';
     if (minutes < 60) return `${minutes}m ago`;
     if (hours < 24) return `${hours}h ago`;
     if (days < 7) return `${days}d ago`;
     
     return date.toLocaleDateString();
   }

   async function createTestNotification() {
     try {
       const response = await fetch('/notifications/test', {
         method: 'POST'
       });
       
       if (response.ok) {
         alert('Test notification created! Check your notifications.');
         loadNotifications(); // Reload notifications
       } else {
         alert('Error creating test notification');
       }
     } catch (error) {
       console.error('Error creating test notification:', error);
       alert('Error creating test notification');
     }
   }
</script>
